# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: vouchers # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:us-west-2:*"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
#listVoucher function will be used to show redemption for today only
  list:
    handler: voucher.list
    events:
      - http:
          path: voucher
          method: GET
          cors: true
  query:
    handler: voucher.query
    events:
      - http:
          path: voucher/query
          method: GET
          cors: true
  queryVoucherByRedeemedAt:
    handler: voucher.queryVoucherByRedeemedAt
    events:
      - http:
         path: voucher/queryVoucherByRedeemedAt
         method: GET
         cors: true
  queryVoucherPending:
      handler: voucher.queryVoucherPending
      events:
        - http:
            path: voucher/queryVoucherPending
            method: GET
            cors: true
  queryVoucherPendingForPlayerContactNumber:
    handler: voucher.queryVoucherPendingForPlayerContactNumber
    events:
      - http:
          path: voucher/queryVoucherPendingForPlayerContactNumber
          method: GET
          cors: true
  post:
    handler: voucher.post
    events:
      - http:
          path: voucher
          method: POST
          cors: true
  redeemSelectedVouchers:
    handler: voucher.redeemSelectedVouchers
    events:
      - http:
          path: voucher/redeemSelectedVouchers
          method: POST
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    VoucherTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "shopId"
          AttributeType: "S"
        - AttributeName: "createdAt"
          AttributeType: "N"
        - AttributeName: "playerContactNumber"
          AttributeType: "S"
        - AttributeName: "redeemed"
          AttributeType: "N"
        - AttributeName: "redeemedAt"
          AttributeType: "N"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        TableName: 'vouchers'
        GlobalSecondaryIndexes:
        - IndexName: "shopId-createdAt-index"
          KeySchema:
          -  AttributeName: "shopId"
             KeyType: "HASH"
          -  AttributeName: "createdAt"
             KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
        - IndexName: "playerContactNumber-redeemed-index"
          KeySchema:
          - AttributeName: "playerContactNumber"
            KeyType: "HASH"
          - AttributeName: "redeemed"
            KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
        - IndexName: "shopId-redeemed-index"
          KeySchema:
          - AttributeName: "shopId"
            KeyType: "HASH"
          - AttributeName: "redeemed"
            KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
        - IndexName: "shopId-redeemedAt-index"
          KeySchema:
          - AttributeName: "shopId"
            KeyType: "HASH"
          - AttributeName: "redeemedAt"
            KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
